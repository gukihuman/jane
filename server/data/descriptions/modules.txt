modules\CONFIG.ts: This TypeScript module handles game configuration by merging user-defined settings with defaults. It covers aspects like viewport dimensions, max FPS, and component/system priorities, affecting game logic order.

modules\EFFECTS.ts: This class, "Effects," manages visual effects in the game. It handles front and back effects, cleaning up expired ones and exporting as "EFFECTS" for use in animations.

modules\logic\COORDINATES.ts: This utility module provides functions and classes for managing coordinates and vectors within the game engine, simplifying character movements and interactions.

modules\logic\ENTITY_FACTORY.ts: This TypeScript class, "EntityFactory," creates game entities with specific components and properties. It handles entity creation, component injection, and dependencies.

modules\logic\EVENTS.ts: The "Events" class manages event handling with methods for adding, emitting, and limiting event executions. It plays a key role in managing in-game events.

modules\logic\LIB.ts: This "Lib" class offers utility functions for various tasks, including object manipulation, logging, random string generation, and more, aiding overall game development.

modules\logic\LOCAL.ts: The "Local" class handles local storage for game state data, syncing inventory and hero position. It initializes, processes, and exports as "LOCAL" for state management.

modules\logic\SPRITE.ts: This class, "Spr," manages sprite animations for entities, effects, and items in the game. It handles creation, placement, and clearing of animations.

modules\reactive\ACTIVE_SCENE.ts: The "activeScene" object manages scenes, choices, and transitions within the game, enabling dynamic storytelling and interaction.

modules\reactive\GLOBAL.ts: This object, "global," controls the game's global state and context switching between "world" and "interface," facilitating UI and game world state transitions.

modules\reactive\INTERFACE.ts: The "inter" object manages user interface elements and their states, adjusting them based on game context and player interactions.

modules\reactive\INVENTORY.ts: This module defines an inventory system with "equipped" and "bag" containers for items, handling equipping, unequipping, and UI updates.

modules\reactive\REFS.ts: This module exports an object, "refs," likely for managing references or handles to elements in a reactive context.

modules\SETTINGS.ts: The "Settings" class manages game settings and input configurations, including keybindings, gamepad sensitivity, and gameplay options.

modules\storage\ASSETS.ts: This class, "Assets," manages webps and JSONs, auto-importing them into the application and exporting as "ASSETS" for easy access.

modules\storage\ITEMS.ts: This class manages items, such as clothing and weapons, with "clothes" and "weapons" containers. It handles item management and exporting as "ITEMS."

modules\storage\LAST.ts: The "Last" class stores snapshots of game state, including entities, hero, hover objects, and scenePart. It updates periodically and exports as "LAST."

modules\storage\MODELS.ts: This class, "Models," serves as a container for game-related data structures, including entities, components, and systems, exported as "MODELS."

modules\storage\SCENE.ts: The "Scene" class manages scenes and text-based content, parsing Markdown and plain text to organize scenes, images, text, and choices for dynamic storytelling.

modules\storage\SKILLS.ts: This module, "Skills," manages game skills, likely storing information about different skills and exporting as "SKILLS" for use in gameplay.